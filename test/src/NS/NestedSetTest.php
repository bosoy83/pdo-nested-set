<?php

namespace NS;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-07 at 17:29:57.
 */
class NestedSetTest extends \PHPUnit_Framework_TestCase {

  /**
   * @var NestedSet
   */
  protected $object;
  
  private $dsn = 'mysql:host=localhost;dbname=tree;port=3306';
  private $user = 'root';
  private $password = '';

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $pdo = new \PDO($this->dsn, $this->user, $this->password);
    $sql = "
DROP TABLE IF EXISTS `tree_test`;
CREATE TABLE IF NOT EXISTS `tree_test` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(20) NOT NULL,
  `lft` int(11) NOT NULL,
  `rgt` int(11) NOT NULL,
  `parent_id` int(11) DEFAULT NULL,
  `tree_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=11 ;

INSERT INTO `tree_test` (`id`, `name`, `lft`, `rgt`, `parent_id`, `tree_id`) VALUES
(1, 'root 1', 1, 20, NULL, 1),
(2, 'child 1.1', 2, 9, 1, 1),
(3, 'child 1.1.1', 3, 4, 2, 1),
(4, 'child 1.1.2', 5, 6, 2, 1),
(5, 'child 1.1.3', 7, 8, 2, 1),
(6, 'child 1.2', 10, 19, 1, 1),
(7, 'child 1.2.1', 11, 14, 6, 1),
(8, 'child 1.2.1.1', 12, 13, 7, 1),
(9, 'child 1.2.2', 15, 16, 6, 1),
(10, 'child 1.2.3', 17, 18, 6, 1);
";
    $pdo->exec($sql);
    
    $this->object = new NestedSet($pdo, 'tree_test', 'id', 'parent_id', 'tree_id', 'lft', 'rgt');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }

  /**
   * @covers NS\NestedSet::getTree
   * @todo   Implement testGetTree().
   */
  public function testGetTree() {
    
    $tree = $this->object->getTree(1);
    $this->assertNotEmpty($tree);
    $this->assertCount(10, $tree);
    
    $expectedTree = array(
      array('id' => '1','name' => 'root 1','lft' => '1','rgt' => '20','parent_id' => NULL,'tree_id' => '1'),
      array('id' => '2','name' => 'child 1.1','lft' => '2','rgt' => '9','parent_id' => '1','tree_id' => '1'),
      array('id' => '3','name' => 'child 1.1.1','lft' => '3','rgt' => '4','parent_id' => '2','tree_id' => '1'),
      array('id' => '4','name' => 'child 1.1.2','lft' => '5','rgt' => '6','parent_id' => '2','tree_id' => '1'),
      array('id' => '5','name' => 'child 1.1.3','lft' => '7','rgt' => '8','parent_id' => '2','tree_id' => '1'),
      array('id' => '6','name' => 'child 1.2','lft' => '10','rgt' => '19','parent_id' => '1','tree_id' => '1'),
      array('id' => '7','name' => 'child 1.2.1','lft' => '11','rgt' => '14','parent_id' => '6','tree_id' => '1'),
      array('id' => '8','name' => 'child 1.2.1.1','lft' => '12','rgt' => '13','parent_id' => '7','tree_id' => '1'),
      array('id' => '9','name' => 'child 1.2.2','lft' => '15','rgt' => '16','parent_id' => '6','tree_id' => '1'),
      array('id' => '10','name' => 'child 1.2.3','lft' => '17','rgt' => '18','parent_id' => '6','tree_id' => '1')
    );
    $this->assertEquals($expectedTree, $tree);
    
    NestedSet::$fetchMode = \PDO::FETCH_CLASS;
    $treeNodes = $this->object->getTree(1);
    $expectedNodeTree = array();
    foreach($expectedTree as $arrayNode) {
      $expectedNodeTree[] = NestedSetNode::fromArray($arrayNode, $this->object);
    }
    $this->assertEquals($expectedNodeTree, $treeNodes);
    
  }

  public function testGetNode() {
    NestedSet::$fetchMode = \PDO::FETCH_ASSOC;
    $node = $this->object->getNode(2);
    $this->assertNotEmpty($node);
    $this->assertArrayHasKey('name', $node);
    $this->assertContains('child 1.1', $node);
  }

  /**
   * @covers NS\NestedSet::getRoots
   * @todo   Implement testGetRoots().
   */
  public function testGetRoots() {
    NestedSet::$fetchMode = \PDO::FETCH_ASSOC;
    $roots = $this->object->getRoots();
    $this->assertNotEmpty($roots);
    $this->assertCount(1, $roots);
    $this->assertEquals(array(array('id' => '1', 'name' => 'root 1', 'lft' => '1', 'rgt' => '20', 'tree_id' => '1', 'parent_id' => null)), $roots);
  }

  /**
   * @covers NS\NestedSet::createRoot
   * @todo   Implement testCreateRoot().
   */
  public function testCreateRoot() {
    $rootId = $this->object->createRoot(array('name' => 'root 2'), 2);
    $this->assertGreaterThanOrEqual(11, $rootId);
    NestedSet::$fetchMode = \PDO::FETCH_ASSOC;
    $root = $this->object->getNode($rootId);
    $this->assertEquals(array('id' => $rootId, 'name' => 'root 2', 'lft' => '1', 'rgt' => '2', 'tree_id' => '2', 'parent_id' => 0), $root);
  }

  /**
   * @covers NS\NestedSet::createNode
   * @todo   Implement testCreateNode().
   */
  public function testCreateChild() {
    $childId = $this->object->createChild(1, array('name' => 'child X'), 1);
    $child = $this->object->getNode($childId);
    $this->assertArrayHasKey('name', $child);
    $this->assertContains('child X', $child);
  }

  /**
   * @covers NS\NestedSet::createSibling
   * @todo   Implement testCreateSibling().
   */
  public function testCreateSibling() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
        'This test has not been implemented yet.'
    );
  }

}
