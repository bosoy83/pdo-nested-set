<?php

namespace NS;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-07 at 17:29:57.
 */
class NestedSetTestMultiTree extends \PHPUnit_Framework_TestCase {

  /**
   * @var NestedSet
   */
  protected $object;
  private $dsn = 'mysql:host=localhost;dbname=tree;port=3306';
  private $user = 'root';
  private $password = '';

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $pdo = new \PDO($this->dsn, $this->user, $this->password);
    $sql = "
DROP TABLE IF EXISTS `tree_test`;
CREATE TABLE IF NOT EXISTS `tree_test` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(20) NOT NULL,
  `left` int(11) NOT NULL,
  `right` int(11) NOT NULL,
  `parent_id` int(11) DEFAULT NULL,
  `tree_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=11 ;

INSERT INTO `tree_test` (`id`, `name`, `left`, `right`, `parent_id`, `tree_id`) VALUES
(1, 'root 1', 1, 20, NULL, 1),
(2, 'child 1.1', 2, 9, 1, 1),
(3, 'child 1.1.1', 3, 4, 2, 1),
(4, 'child 1.1.2', 5, 6, 2, 1),
(5, 'child 1.1.3', 7, 8, 2, 1),
(6, 'child 1.2', 10, 19, 1, 1),
(7, 'child 1.2.1', 11, 14, 6, 1),
(8, 'child 1.2.1.1', 12, 13, 7, 1),
(9, 'child 1.2.2', 15, 16, 6, 1),
(10, 'child 1.2.3', 17, 18, 6, 1);
";
    $pdo->exec($sql);

    $this->object = new NestedSet($pdo, 'tree_test', 'id', 'parent_id', 'tree_id', 'left', 'right');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }

  /**
   * @covers NS\NestedSet::getTree
   * @todo   Implement testGetTree().
   */
  public function testGetTree() {

    $tree = $this->object->getTree(1);
    $this->assertNotEmpty($tree);
    $this->assertCount(10, $tree);

    $expectedTree = array(
      array('id' => '1', 'name' => 'root 1', 'left' => '1', 'right' => '20', 'parent_id' => NULL, 'tree_id' => '1'),
      array('id' => '2', 'name' => 'child 1.1', 'left' => '2', 'right' => '9', 'parent_id' => '1', 'tree_id' => '1'),
      array('id' => '3', 'name' => 'child 1.1.1', 'left' => '3', 'right' => '4', 'parent_id' => '2', 'tree_id' => '1'),
      array('id' => '4', 'name' => 'child 1.1.2', 'left' => '5', 'right' => '6', 'parent_id' => '2', 'tree_id' => '1'),
      array('id' => '5', 'name' => 'child 1.1.3', 'left' => '7', 'right' => '8', 'parent_id' => '2', 'tree_id' => '1'),
      array('id' => '6', 'name' => 'child 1.2', 'left' => '10', 'right' => '19', 'parent_id' => '1', 'tree_id' => '1'),
      array('id' => '7', 'name' => 'child 1.2.1', 'left' => '11', 'right' => '14', 'parent_id' => '6', 'tree_id' => '1'),
      array('id' => '8', 'name' => 'child 1.2.1.1', 'left' => '12', 'right' => '13', 'parent_id' => '7', 'tree_id' => '1'),
      array('id' => '9', 'name' => 'child 1.2.2', 'left' => '15', 'right' => '16', 'parent_id' => '6', 'tree_id' => '1'),
      array('id' => '10', 'name' => 'child 1.2.3', 'left' => '17', 'right' => '18', 'parent_id' => '6', 'tree_id' => '1')
    );
    $this->assertEquals($expectedTree, $tree);

    NestedSet::$fetchMode = \PDO::FETCH_CLASS;
    $treeNodes = $this->object->getTree(1);
    $expectedNodeTree = array();
    foreach ($expectedTree as $arrayNode) {
      $expectedNodeTree[] = NestedSetNode::fromArray($arrayNode, $this->object);
    }
    $this->assertEquals($expectedNodeTree, $treeNodes);
  }

  public function testGetNode() {
    NestedSet::$fetchMode = \PDO::FETCH_ASSOC;
    $node = $this->object->getNode(2);
    $this->assertNotEmpty($node);
    $this->assertArrayHasKey('name', $node);
    $this->assertContains('child 1.1', $node);
  }

  /**
   * @covers NS\NestedSet::getRoots
   */
  public function testGetRoots() {
    NestedSet::$fetchMode = \PDO::FETCH_ASSOC;
    $roots = $this->object->getRoots();
    $this->assertNotEmpty($roots);
    $this->assertCount(1, $roots);
    $this->assertEquals(array(array('id' => '1', 'name' => 'root 1', 'left' => '1', 'right' => '20', 'tree_id' => '1', 'parent_id' => null)), $roots);
  }

  /**
   * @covers NS\NestedSet::createRoot
   */
  public function testCreateRoot() {
    $rootId = $this->object->createRoot(array('name' => 'root 2'), 2);
    $this->assertGreaterThanOrEqual(11, $rootId);
    NestedSet::$fetchMode = \PDO::FETCH_ASSOC;
    $root = $this->object->getNode($rootId);
    $this->assertEquals(array('id' => $rootId, 'name' => 'root 2', 'left' => '1', 'right' => '2', 'tree_id' => '2', 'parent_id' => 0), $root);
  }

  /**
   * @covers NS\NestedSet::createNode
   */
  public function testCreateChild() {
    $childId = $this->object->createChild(1, array('name' => 'child X'), 1);
    $child = $this->object->getNode($childId);
    $this->assertArrayHasKey('name', $child);
    $this->assertContains('child X', $child);
  }

  /**
   * @covers NS\NestedSet::getParent
   */
  public function testGetParent() {
    $this->assertEquals(array('id' => '1', 'name' => 'root 1', 'left' => '1', 'right' => '20', 'tree_id' => '1', 'parent_id' => null), $this->object->getParent(2));
    $this->assertEquals(array('id' => '2', 'name' => 'child 1.1', 'left' => '2', 'right' => '9', 'parent_id' => '1', 'tree_id' => '1'), $this->object->getParent(5));
  }

  /**
   * @covers NS\NestedSet::getDescendants
   */
  public function testGetDescendants() {
    $descendants = $this->object->getDescendants(6);
    $this->assertCount(4, $descendants);
    $this->assertEquals(array(
      array('id' => '7', 'name' => 'child 1.2.1', 'left' => '11', 'right' => '14', 'parent_id' => '6', 'tree_id' => '1'),
      array('id' => '8', 'name' => 'child 1.2.1.1', 'left' => '12', 'right' => '13', 'parent_id' => '7', 'tree_id' => '1'),
      array('id' => '9', 'name' => 'child 1.2.2', 'left' => '15', 'right' => '16', 'parent_id' => '6', 'tree_id' => '1'),
      array('id' => '10', 'name' => 'child 1.2.3', 'left' => '17', 'right' => '18', 'parent_id' => '6', 'tree_id' => '1')), $descendants);
  }

  /**
   * @covers NS\NestedSet::getChildren
   */
  public function testGetChildren() {
    $children = $this->object->getChildren(6);
    $this->assertCount(3, $children);
    $this->assertEquals(array(array('id' => '7', 'name' => 'child 1.2.1', 'left' => '11', 'right' => '14', 'parent_id' => '6', 'tree_id' => '1'),
      array('id' => '9', 'name' => 'child 1.2.2', 'left' => '15', 'right' => '16', 'parent_id' => '6', 'tree_id' => '1'),
      array('id' => '10', 'name' => 'child 1.2.3', 'left' => '17', 'right' => '18', 'parent_id' => '6', 'tree_id' => '1')), $children);
  }

  /**
   * @covers NS\NestedSet::getTreeLeafs
   */
  public function testGetTreeLeafs() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
        'This test has not been implemented yet.'
    );
  }

  /**
   * @covers NS\NestedSet::getAncestors
   */
  public function testGetAncestors() {
    $ancestors = $this->object->getAncestors(7);
    $this->assertCount(2, $ancestors);
    $this->assertEquals(array(
      array('id' => '1', 'name' => 'root 1', 'left' => '1', 'right' => '20', 'parent_id' => NULL, 'tree_id' => '1'),
      array('id' => '6', 'name' => 'child 1.2', 'left' => '10', 'right' => '19', 'parent_id' => '1', 'tree_id' => '1'),
        ), $ancestors);
  }

  /**
   * @covers NS\NestedSet::getNodeId
   * @todo   Implement testGetNodeId().
   */
  public function testGetNodeId() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
        'This test has not been implemented yet.'
    );
  }

  /**
   * @covers NS\NestedSet::countChildren
   */
  public function testCountChildren() {
    $count = $this->object->countChildren(6);
    $this->assertEquals(3, $count);
  }

  /**
   * @covers NS\NestedSet::hasChildren
   */
  public function testHasChildren() {
    $this->assertTrue($this->object->hasChildren(2));
  }

  /**
   * @covers NS\NestedSet::createSibling
   */
  public function testCreateSibling() {
    $id = $this->object->createSibling(2, array('name' => 'child 1.X'), 1);
    $child = $this->object->getNode($id);
    $this->assertArrayHasKey('name', $child);
    $this->assertContains('child 1.X', $child);
    $this->assertFalse($this->object->hasChildren($id));
  }

  /**
   * @covers NS\NestedSet::deleteNode
   */
  public function testDeleteNode() {
    $this->object->deleteNode(7);
    $children = $this->object->getChildren(6);
    $this->assertEquals(array(
      array('id' => '8', 'name' => 'child 1.2.1.1', 'left' => '11', 'right' => '12', 'parent_id' => '6', 'tree_id' => '1'),
      array('id' => '9', 'name' => 'child 1.2.2', 'left' => '13', 'right' => '14', 'parent_id' => '6', 'tree_id' => '1'),
      array('id' => '10', 'name' => 'child 1.2.3', 'left' => '15', 'right' => '16', 'parent_id' => '6', 'tree_id' => '1')), $children);
  }

  /**
   * @covers NS\NestedSet::deleteNodeAndChildren
   */
  public function testDeleteNodeAndChildren() {
    $this->object->deleteNodeAndChildren(2);
    $this->assertEquals(array(
    array (
    'id' => '1',
    'name' => 'root 1',
    'left' => '1',
    'right' => '12',
    'parent_id' => NULL,
    'tree_id' => '1',
    ),
    array (
    'id' => '6',
    'name' => 'child 1.2',
    'left' => '2',
    'right' => '11',
    'parent_id' => '1',
    'tree_id' => '1',
    ),
    array (
    'id' => '7',
    'name' => 'child 1.2.1',
    'left' => '3',
    'right' => '6',
    'parent_id' => '6',
    'tree_id' => '1',
    ),
    array (
    'id' => '8',
    'name' => 'child 1.2.1.1',
    'left' => '4',
    'right' => '5',
    'parent_id' => '7',
    'tree_id' => '1',
    ),
    array (
    'id' => '9',
    'name' => 'child 1.2.2',
    'left' => '7',
    'right' => '8',
    'parent_id' => '6',
    'tree_id' => '1',
    ),
    array (
    'id' => '10',
    'name' => 'child 1.2.3',
    'left' => '9',
    'right' => '10',
    'parent_id' => '6',
    'tree_id' => '1',
    ),
    ), $this->object->getTree(1));
  }

  /**
   * @covers NS\NestedSet::deleteTree
   * @todo   Implement testDeleteTree().
   */
  public function testDeleteTree() {
    $this->object->deleteTree(1);
    $this->assertEmpty($this->object->getTree(1));
  }

}
